What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, a .git is created in the file. This allows you to see the history of each commit of the files in the repo. You need to do it in order to track commits over time

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is like an intermediate step between the working directory and the repository. The working directory is like a sandbox, where all changes can be made. A repository is a history of these changes. The staging area allows you to pick and choose exactly what you want to be recording in the repository, and allows more flexibility for customizing each commit.

How can you use the staging area to make sure you have one commit per logical
change?
You can use the staging area to commit files that actually have logical changes in them, as opposed to commiting the whole file so that you don't commit files that don't have logical changes in them. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

branches are useful when experimenting with new game designs, but rather than adding on to the game and improving it, changing existing components. This could be for many reasons, to try something new, to the change the language, etc. The branches help keep these separate types of games organized by allowing you to name them. As the name implies, it lets you branch off into different ideas

How do the diagrams help you visualize the branch structure?

They show what branches and parents can see what, as well as any unreachable commits. They help show the relationship across branches and commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches will combine them in such a way that will include both functions and features as a part of the final merge. It is represented in the diagram in that way because it makes the most logical sense in that manner, it also respects the arrows. 

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?